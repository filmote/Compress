#include <Arduboy2.h>

Arduboy2 arduboy;

const uint8_t PROGMEM threeColour_01[] {  // 6
0x20, 0x86, 0x9C, 0xA4, 0xE4, 0x88, 
};

const uint8_t PROGMEM ardbitmap_01[] ={ //  8
0x87, 0x0f, 0x05, 0xf8, 0x30, 0xf0, 0x69, 0x00,
};

const uint8_t PROGMEM drawCompressed_01[] = { // 8
0x07, 0x0f, 0x5d, 0x15, 0xe2, 0x2a, 0xd4, 0x05
};

const uint8_t PROGMEM threeColour_02[] { // 346
0x82, 0xB4, 0x4D, 0x49, 0x11, 0x23, 0x49, 0xB5, 0x44, 0xD4, 0x89, 0x26, 0xC4, 0x89, 0x43, 0x48, 
0x54, 0x47, 0x49, 0xB5, 0x42, 0x54, 0x96, 0x24, 0x89, 0x26, 0xF5, 0x11, 0x15, 0x22, 0x22, 0x4D, 
0x8B, 0x0A, 0xE4, 0xB1, 0x24, 0x49, 0x24, 0x31, 0x4B, 0xC9, 0x25, 0x28, 0x8E, 0x90, 0xAE, 0x46, 
0x24, 0x89, 0x88, 0x34, 0x8D, 0x23, 0x48, 0x92, 0x45, 0x90, 0x54, 0x5D, 0x48, 0x96, 0x25, 0x48, 
0x49, 0x23, 0xA6, 0x88, 0xA2, 0xEC, 0x94, 0x15, 0x91, 0x52, 0x34, 0x8A, 0x6A, 0x99, 0x71, 0x21, 
0x50, 0x56, 0x14, 0xC8, 0x49, 0x22, 0x4C, 0x53, 0x2E, 0xC9, 0x42, 0x51, 0x15, 0x23, 0x48, 0xA6, 
0x29, 0x97, 0x12, 0x25, 0x85, 0x72, 0x12, 0x49, 0x49, 0x1A, 0x42, 0xA2, 0xF2, 0x44, 0xC4, 0x22, 
0x24, 0x69, 0x22, 0xA4, 0x2A, 0x99, 0x89, 0x24, 0xA5, 0x11, 0x12, 0x24, 0x91, 0x92, 0x16, 0x29, 
0x7D, 0x61, 0x5C, 0x96, 0x45, 0x49, 0xBD, 0x44, 0x45, 0x48, 0x29, 0x12, 0x4D, 0xAA, 0x12, 0xA4, 
0xB2, 0x2A, 0x4D, 0x89, 0x12, 0x86, 0x90, 0xA8, 0x88, 0x91, 0x24, 0xDA, 0xA2, 0x62, 0x46, 0x93, 
0xBA, 0x48, 0xE9, 0x3C, 0x24, 0x8C, 0x93, 0xCA, 0x48, 0x89, 0x3D, 0x24, 0x69, 0x3E, 0x48, 0x2A, 
0x3D, 0x31, 0x04, 0xA3, 0xF8, 0x56, 0x4A, 0x59, 0xC9, 0x24, 0x85, 0x0D, 0x27, 0x24, 0x91, 0x92, 
0x25, 0x85, 0x47, 0x14, 0x8D, 0x41, 0x5C, 0x82, 0xC9, 0x34, 0xC8, 0x69, 0x91, 0x2D, 0x8C, 0x64, 
0x49, 0x1D, 0x45, 0x26, 0x21, 0x79, 0x34, 0x63, 0x7B, 0x10, 0x8C, 0xA1, 0x48, 0xD2, 0xC5, 0x22, 
0xA4, 0x49, 0x0B, 0x10, 0x49, 0x32, 0xB1, 0x48, 0xB4, 0x40, 0xA4, 0x2B, 0x91, 0x79, 0x8C, 0x45, 
0xA2, 0xAA, 0x4A, 0x91, 0x61, 0x8E, 0x46, 0xA2, 0xB1, 0xC8, 0x89, 0x12, 0x4B, 0x29, 0x24, 0x51, 
0x19, 0x44, 0x46, 0x20, 0x54, 0x59, 0x48, 0xA8, 0x8C, 0xC2, 0x2B, 0x10, 0x88, 0x92, 0xE2, 0x44, 
0xCD, 0x23, 0x31, 0x4C, 0xCA, 0x26, 0xB1, 0x8D, 0xAC, 0xD3, 0x70, 
};

const uint8_t PROGMEM ardbitmap_02[] = { // 178
0x2b, 0x3f, 0x37, 0x07, 0x5a, 0xb7, 0x09, 0xc8, 0xc2, 0x61, 0x04, 0x10, 0x91, 0x02, 0x8a, 0x01, 
0xb0, 0xb2, 0x03, 0xcb, 0x3a, 0xd0, 0xfa, 0x47, 0x19, 0xb2, 0x10, 0x08, 0x26, 0xee, 0x0c, 0x8e, 
0x20, 0x01, 0x6c, 0x08, 0xe0, 0xb0, 0xa4, 0x10, 0x07, 0x08, 0x71, 0x14, 0x26, 0x5b, 0x02, 0xd8, 
0x10, 0xc0, 0x80, 0x67, 0x36, 0x93, 0x5f, 0xbc, 0x0f, 0x00, 0x02, 0xb7, 0xbd, 0x25, 0x14, 0x99, 
0x80, 0x08, 0x0c, 0x40, 0x64, 0x52, 0x04, 0x2e, 0x08, 0x14, 0x08, 0x02, 0x93, 0x41, 0x11, 0x18, 
0x80, 0x08, 0x0c, 0x8a, 0x84, 0x30, 0x99, 0x4c, 0xa0, 0x48, 0x28, 0xa0, 0xf6, 0x67, 0xec, 0x0d, 
0x02, 0x80, 0x70, 0xde, 0xfb, 0xa3, 0x03, 0x16, 0x80, 0x00, 0x08, 0x44, 0x02, 0x42, 0x28, 0x29, 
0xc0, 0x02, 0x7e, 0x97, 0x3b, 0x93, 0xcd, 0x66, 0x73, 0xd5, 0xea, 0x40, 0x00, 0x04, 0x00, 0x39, 
0xed, 0xfd, 0xe9, 0x1e, 0x5d, 0x0e, 0x60, 0xb1, 0x80, 0xe5, 0xb1, 0x3f, 0x95, 0xe1, 0x40, 0x94, 
0x40, 0xb3, 0x01, 0x80, 0x5a, 0x18, 0xc2, 0x00, 0x5a, 0x52, 0x52, 0xfe, 0xe2, 0x6e, 0x86, 0x18, 
0xc0, 0xc0, 0x72, 0xb2, 0x80, 0xc9, 0x00, 0x16, 0x8b, 0x7f, 0x1e, 0x6b, 0xfb, 0xef, 0xaa, 0xbb, 
0xbf, 0x0b,
};

const uint8_t PROGMEM drawCompressed_02[] = { // 192
0x2a, 0x3f, 0xb8, 0x96, 0xbd, 0xdb, 0xaf, 0x54, 0x9d, 0x6d, 0xb9, 0xba, 0xea, 0xee, 0x5c, 0xf5, 
0xad, 0xaa, 0x76, 0xe7, 0x55, 0xd9, 0xdd, 0xb2, 0x77, 0x43, 0x46, 0xf2, 0x6c, 0x57, 0xaa, 0x95, 
0xda, 0x2b, 0x19, 0x59, 0x9d, 0xaa, 0x76, 0x2a, 0x55, 0x2d, 0x77, 0x29, 0x57, 0x6a, 0x59, 0x97, 
0x5a, 0xba, 0xd2, 0xf9, 0x53, 0xd5, 0x4e, 0xa5, 0xaa, 0x55, 0x4d, 0x97, 0x0f, 0xe3, 0x9e, 0xa8, 
0xea, 0x8a, 0xcb, 0xfb, 0x53, 0xb9, 0x4e, 0x57, 0x77, 0x25, 0xab, 0x3b, 0x9d, 0xeb, 0x8a, 0xa9, 
0x2b, 0x57, 0xa9, 0xae, 0x74, 0x32, 0xd7, 0x95, 0xac, 0xee, 0x4a, 0xe6, 0x3a, 0x95, 0x4a, 0xa7, 
0x2b, 0xd7, 0xa9, 0x5c, 0xf5, 0x3b, 0x34, 0x7a, 0x5f, 0x57, 0xd5, 0x45, 0xe7, 0x3d, 0xd2, 0x64, 
0xd9, 0xaa, 0xab, 0xba, 0x52, 0xa7, 0xea, 0x52, 0xb9, 0x94, 0xab, 0xb2, 0x15, 0x3e, 0xf7, 0x4a, 
0xe7, 0xf3, 0xf9, 0xd8, 0xde, 0xbd, 0xec, 0xaa, 0xae, 0xaa, 0xa3, 0xf2, 0x1e, 0x75, 0x8e, 0x6c, 
0xbb, 0xac, 0x6c, 0xb6, 0xb2, 0x93, 0x39, 0x14, 0x27, 0x97, 0xdd, 0xa7, 0xca, 0x29, 0x5f, 0x55, 
0xb9, 0x5d, 0xc9, 0x4b, 0x56, 0xce, 0xa5, 0x5c, 0xca, 0x05, 0xd3, 0xed, 0x93, 0xb7, 0xaa, 0x56, 
0x65, 0xd7, 0xd9, 0x4a, 0x27, 0x2b, 0x9b, 0x0d, 0x5a, 0xb4, 0x7e, 0xf8, 0xd4, 0x79, 0x87, 0x57
};

const uint8_t PROGMEM threeColour_03[] { // 514
0x84, 0x04, 0x73, 0x64, 0x18, 0x14, 0x4D, 0x64, 0x99, 0xD2, 0x24, 0x8D, 0x92, 0x6F, 0x49, 0x11, 
0x67, 0x74, 0x91, 0x92, 0x77, 0x49, 0x21, 0x27, 0x54, 0x92, 0x92, 0x73, 0x49, 0x31, 0x27, 0x14, 
0x93, 0x92, 0x6F, 0x49, 0x41, 0x26, 0x96, 0x29, 0x49, 0x26, 0x55, 0x96, 0x12, 0x61, 0x59, 0x6D, 
0x26, 0x04, 0x97, 0x52, 0x5F, 0x51, 0x79, 0x25, 0xE4, 0x97, 0xD2, 0x5E, 0x49, 0x45, 0x64, 0xB4, 
0x93, 0xD9, 0x04, 0x74, 0x93, 0xD8, 0xE4, 0x94, 0x91, 0x99, 0x32, 0x25, 0xA4, 0x92, 0xB2, 0x4C, 
0x88, 0xCC, 0x82, 0x22, 0x64, 0xA2, 0x6A, 0x49, 0x4C, 0x61, 0xC8, 0x29, 0x22, 0xA4, 0x94, 0xA9, 
0x93, 0x52, 0x4B, 0x62, 0xD1, 0x04, 0xA9, 0x12, 0x13, 0x25, 0x93, 0xD2, 0x4A, 0x4C, 0x93, 0x44, 
0x0A, 0x46, 0x92, 0x4A, 0x64, 0xA2, 0x8A, 0x45, 0x44, 0x4C, 0x83, 0x44, 0x0A, 0x44, 0xA2, 0x3A, 
0xC2, 0xB2, 0x9A, 0x47, 0x31, 0x31, 0x68, 0x81, 0x48, 0xD2, 0x46, 0x92, 0x8A, 0xC9, 0x1C, 0xC2, 
0xC6, 0x1C, 0x84, 0xA9, 0x0E, 0x4A, 0x2C, 0x24, 0x72, 0x0A, 0xC9, 0x29, 0x14, 0x84, 0x91, 0x24, 
0x2B, 0x2D, 0xA4, 0x72, 0x23, 0xB1, 0x64, 0x24, 0x8D, 0x98, 0x57, 0x50, 0xA8, 0xA3, 0x62, 0x0E, 
0x42, 0x49, 0x29, 0x94, 0x4E, 0x51, 0x12, 0x8A, 0x46, 0x98, 0x92, 0x53, 0x62, 0x12, 0xD6, 0x45, 
0xA5, 0x09, 0x26, 0x36, 0x21, 0x16, 0x92, 0x24, 0x99, 0x18, 0xA4, 0x7A, 0x38, 0x92, 0x39, 0x17, 
0xD9, 0x02, 0xA3, 0x85, 0x22, 0xA3, 0x16, 0xD8, 0xC2, 0xA3, 0x05, 0x22, 0xA4, 0x96, 0x96, 0x2A, 
0x28, 0x52, 0x2A, 0x51, 0x69, 0x62, 0xA2, 0x05, 0x22, 0xA5, 0x16, 0xD6, 0x39, 0x85, 0x22, 0xA5, 
0x96, 0xD6, 0x39, 0x05, 0x22, 0xA5, 0x97, 0x56, 0x34, 0x89, 0x22, 0xA6, 0x17, 0x56, 0x44, 0x48, 
0xA9, 0x85, 0xF5, 0x89, 0x64, 0x8A, 0x49, 0x7D, 0x9E, 0x47, 0xA2, 0x98, 0x5A, 0x84, 0x89, 0x1A, 
0x1A, 0x87, 0xC6, 0x41, 0xFC, 0x49, 0x3F, 0xA4, 0xFE, 0x93, 0xFA, 0xCD, 0xC9, 0x27, 0x31, 0x0D, 
0x92, 0x26, 0x24, 0x2A, 0x35, 0xA4, 0x69, 0x27, 0xA4, 0xD4, 0x91, 0x28, 0x54, 0x61, 0x24, 0xD2, 
0x91, 0x24, 0x49, 0x15, 0x18, 0x29, 0x34, 0xCC, 0x4C, 0xC1, 0x24, 0xD2, 0x91, 0x24, 0x49, 0x0B, 
0x30, 0x49, 0x35, 0x24, 0x4A, 0x13, 0x30, 0x49, 0x35, 0xA4, 0x6A, 0x27, 0x24, 0xD9, 0x22, 0x62, 
0x42, 0xA3, 0x6A, 0x49, 0xCC, 0x43, 0xE3, 0x10, 0xFA, 0x93, 0xF4, 0x8F, 0xE1, 
};

const uint8_t PROGMEM ardbitmap_03[] = { // 283
0x3f, 0x3f, 0x3f, 0x97, 0xe1, 0x60, 0xb1, 0x58, 0x4c, 0x16, 0x93, 0x89, 0x00, 0x06, 0x90, 0x00, 
0x12, 0x4a, 0xa8, 0xd3, 0xe9, 0xbf, 0x32, 0x13, 0xf3, 0xbd, 0xac, 0xb6, 0x11, 0x04, 0x01, 0x52, 
0x70, 0x98, 0xb0, 0x00, 0x80, 0x02, 0x38, 0xa0, 0x6b, 0xac, 0xfc, 0x33, 0x61, 0xb1, 0x58, 0x2c, 
0x9a, 0x2f, 0xc6, 0x35, 0x13, 0x08, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00, 0x24, 0xc0, 0xc4, 0xd9, 
0x00, 0x14, 0x00, 0x10, 0x00, 0x58, 0x30, 0x9c, 0x2b, 0x2b, 0x23, 0xcb, 0xc9, 0x9f, 0xd4, 0x81, 
0x84, 0x66, 0xf1, 0xfb, 0xd8, 0x6c, 0x76, 0x40, 0x42, 0xd0, 0x10, 0x1a, 0x10, 0x28, 0x41, 0x02, 
0x14, 0x40, 0x00, 0x10, 0x00, 0x04, 0x00, 0x01, 0x40, 0x00, 0x10, 0x00, 0x10, 0x80, 0x02, 0x18, 
0x00, 0x83, 0x29, 0x44, 0x5d, 0x19, 0x7f, 0xb8, 0x7d, 0x66, 0xb3, 0xd9, 0x6c, 0x36, 0x9b, 0xc9, 
0x62, 0xb2, 0x58, 0x2c, 0xd6, 0x7e, 0xec, 0x00, 0x0a, 0x80, 0x10, 0xa6, 0x6c, 0x4a, 0x28, 0x41, 
0x20, 0x08, 0x08, 0x80, 0x04, 0x51, 0x91, 0x20, 0x00, 0x02, 0x20, 0x00, 0x02, 0x00, 0xf3, 0x9e, 
0xf1, 0x97, 0xda, 0x3f, 0x7b, 0xd7, 0x06, 0x10, 0x28, 0x20, 0x90, 0x3a, 0xbc, 0x8e, 0x9d, 0x97, 
0x40, 0x01, 0x40, 0x00, 0x10, 0x00, 0x04, 0x00, 0x01, 0x40, 0x00, 0x10, 0x00, 0x04, 0x00, 0x01, 
0xc0, 0x39, 0xd9, 0x1f, 0x63, 0x01, 0x25, 0x88, 0x8a, 0x08, 0x00, 0x04, 0x11, 0xd1, 0x12, 0x0a, 
0x2c, 0x3e, 0xb2, 0x7f, 0xf7, 0x86, 0x80, 0x83, 0xc5, 0x67, 0xe7, 0xe6, 0x21, 0x50, 0x00, 0x40, 
0x00, 0x10, 0x00, 0x04, 0x00, 0x01, 0x40, 0x00, 0x10, 0x00, 0x04, 0x00, 0x01, 0x60, 0xef, 0x8e, 
0x0f, 0x03, 0x00, 0x02, 0xe0, 0x64, 0xb2, 0x3f, 0x9b, 0x1f, 0x9f, 0x1f, 0x97, 0x8f, 0xb0, 0x59, 
0x6c, 0x16, 0x9b, 0xc5, 0x66, 0xb1, 0xb9, 0xe6, 0xc0, 0x64, 0x32, 0x33, 0x5a, 0x70, 0x02, 0x10, 
0x01, 0x5c, 0x2e, 0x97, 0x4c, 0x0a, 0xb6, 0xed, 0x60, 0x01, 0x07,
};

const uint8_t PROGMEM drawCompressed_03[] = { //306
0x3f, 0x3f, 0xd0, 0x9d, 0x5c, 0x66, 0xb3, 0xd9, 0x74, 0x36, 0x9d, 0xee, 0xaa, 0x55, 0x75, 0xaa, 
0x3a, 0x95, 0x4b, 0xe5, 0xd6, 0xeb, 0x61, 0xd9, 0x95, 0x5a, 0xe1, 0x4b, 0x59, 0xe7, 0x9c, 0xba, 
0xae, 0xab, 0x94, 0xab, 0xe5, 0x4a, 0x65, 0xab, 0x2a, 0x57, 0xb5, 0x2c, 0x67, 0xa5, 0x55, 0xd0, 
0x64, 0x36, 0x9b, 0xcd, 0xe6, 0x14, 0xc6, 0xd4, 0x56, 0x2b, 0x55, 0xaa, 0x2a, 0x55, 0x55, 0x55, 
0x95, 0xaa, 0x4a, 0xa9, 0x4a, 0xb7, 0x76, 0xaa, 0xca, 0x55, 0x55, 0x57, 0x55, 0xb6, 0xe4, 0xda, 
0x2a, 0xab, 0xa4, 0xb2, 0xeb, 0xa0, 0xb4, 0x65, 0xa7, 0x72, 0xca, 0x86, 0xdf, 0x7c, 0x3e, 0xaf, 
0xea, 0x54, 0xaa, 0x57, 0xa9, 0x9c, 0xaa, 0x2b, 0x97, 0xea, 0x54, 0xe5, 0xaa, 0xae, 0xaa, 0xab, 
0xea, 0xaa, 0xba, 0xaa, 0xae, 0xaa, 0xab, 0xaa, 0xab, 0x72, 0x55, 0xab, 0xaa, 0x55, 0x2b, 0x57, 
0xea, 0xb7, 0x4a, 0x42, 0x5c, 0x9e, 0x2e, 0x9f, 0xcf, 0xe7, 0xf3, 0xf9, 0x74, 0x36, 0x9d, 0xcd, 
0x66, 0xb3, 0x9e, 0x7c, 0x59, 0xb9, 0xaa, 0x2e, 0x95, 0x3e, 0x9f, 0x4b, 0xe5, 0x52, 0x5d, 0xa9, 
0xae, 0xae, 0xea, 0x54, 0xf7, 0x77, 0xaa, 0xab, 0xba, 0xaa, 0xab, 0xba, 0xaa, 0xd2, 0x7c, 0x4a, 
0xc2, 0x54, 0x1e, 0xed, 0xde, 0xed, 0x54, 0x75, 0xe5, 0xaa, 0x2b, 0xe5, 0x96, 0xb3, 0x49, 0xaf, 
0x98, 0x2b, 0x57, 0x55, 0x57, 0xd5, 0x55, 0x75, 0x55, 0x5d, 0x55, 0x57, 0xd5, 0x55, 0x75, 0x55, 
0x5d, 0x55, 0x6b, 0x9d, 0x47, 0x56, 0xb6, 0x72, 0xa9, 0xee, 0xef, 0xae, 0xaa, 0x54, 0x77, 0xf7, 
0x2e, 0x95, 0xab, 0x6c, 0x48, 0xf2, 0x78, 0xf7, 0xa5, 0x6a, 0x99, 0x0d, 0x6d, 0xda, 0x47, 0x5c, 
0xb9, 0xaa, 0xea, 0xaa, 0xba, 0xaa, 0xae, 0xaa, 0xab, 0xea, 0xaa, 0xba, 0xaa, 0xae, 0xaa, 0xab, 
0xca, 0x7b, 0x27, 0x11, 0x57, 0x55, 0x5d, 0xd5, 0x3a, 0x9d, 0x47, 0x9b, 0x42, 0xbe, 0x42, 0xae, 
0x42, 0x52, 0x3e, 0x9b, 0xcf, 0xe6, 0xb3, 0xf9, 0x6c, 0x3e, 0x36, 0x45, 0x94, 0x4e, 0xa7, 0x95, 
0x74, 0xae, 0xd6, 0x55, 0xa9, 0xab, 0xb6, 0xdb, 0xed, 0xe9, 0x5c, 0xed, 0x9c, 0x73, 0x32, 0x5b, 
0x11, 0x01
};


// Helper for drawCompressed()
struct BitStreamReader {

  const uint8_t *source;
  uint16_t sourceIndex;
  uint8_t bitBuffer;
  uint8_t byteBuffer;

  BitStreamReader(const uint8_t *source) : source(source), sourceIndex(), bitBuffer(), byteBuffer() { }

  uint16_t readBits(uint16_t bitCount) {

    uint16_t result = 0;

    for (uint16_t i = 0; i < bitCount; i++) {

      if (this->bitBuffer == 0) {
        this->bitBuffer = 0x80;
        this->byteBuffer = pgm_read_byte(&this->source[this->sourceIndex]);
        ++this->sourceIndex;
      }

      if ((this->byteBuffer & this->bitBuffer) != 0) {
        result |= (1 << ((bitCount - 1) - i)); // result |= bitshift_left[i];

      }

      this->bitBuffer >>= 1;

    }

    return result;

  }

};

void draw3ColourCompressed(int16_t sx, int16_t sy, const uint8_t *bitmap, uint8_t color) {

	// set up decompress state
	BitStreamReader cs = BitStreamReader(bitmap);

	// read header
	uint8_t height = (int)cs.readBits(4) * 8;
	uint8_t width = (int)cs.readBits(8);
	uint8_t shortRun = (int)cs.readBits(3);
	uint8_t longRun = 3 * shortRun;

  uint8_t x = 0;
  uint8_t y = 0;

	// no need to draw at all if we're offscreen
	if ((sx + width < 0) || (sx > WIDTH - 1) || (sy + height < 0) || (sy > HEIGHT - 1))
		return;
	
	while (1) {

		uint8_t spanColour = (uint8_t)cs.readBits(2);
		uint8_t isShortRun = ((uint8_t)cs.readBits(1) == 0);
		uint16_t run = 0;
		
		if (isShortRun) {
			run = (uint8_t)cs.readBits(shortRun);
		}
		else {
			run = (uint8_t)cs.readBits(longRun);
		}
		
		for (uint8_t i = 0; i < run; i++) {
			
			switch (spanColour) {
			
				case BLACK:
				case WHITE:
					arduboy.drawPixel(sx + x, sy + y, spanColour);
					y++;  if (y == height) { y = 0; x++; }
					break;
					
				default:
					arduboy.drawPixel(sx + x, sy + y, WHITE);
					y++;  if (y == height) { y = 0; x++; }

					arduboy.drawPixel(sx + x, sy + y, BLACK);
					y++;  if (y == height) { y = 0; x++; }
					
			}
			
		}

		if (x >= width) break;
		
	}
}



/* -----------------------------------------------------------------------------------------------------------------------------
 *  Setup ..
 * -----------------------------------------------------------------------------------------------------------------------------
 */
void setup() {

  arduboy.boot();
  arduboy.display();
  arduboy.flashlight();
  arduboy.systemButtons();
  arduboy.clear();
  arduboy.setFrameRate(60);

}


/* -----------------------------------------------------------------------------------------------------------------------------
 *  Main loop ..
 * -----------------------------------------------------------------------------------------------------------------------------
 */
void loop() {

  if (!(arduboy.nextFrame())) return;
  arduboy.clear();

  //if (arduboy.pressed(A_BUTTON))
  draw3ColourCompressed(10, 10, threeColour_03, WHITE);

  arduboy.display();

}